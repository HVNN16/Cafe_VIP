import React, { useState, useEffect } from "react";
import axios from "../api/axios";
import AdminLayout from "../layouts/AdminLayout";

export default function MenuAdmin() {
    const [products, setProducts] = useState([]);
    const [form, setForm] = useState({
        _id: "",
        name: "",
        price: "",
        image: "",
        category: "",
    });
    const [editing, setEditing] = useState(false);

    const token = localStorage.getItem("token");
    const role = localStorage.getItem("role");

    // üîí Ki·ªÉm tra quy·ªÅn ADMIN
    useEffect(() => {
        if (role !== "ADMIN") {
            alert("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!");
            window.location.href = "/home";
        }
    }, [role]);

    // üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m
    const fetchProducts = async () => {
        try {
            const res = await axios.get("/products", {
                headers: { Authorization: `Bearer ${token}` },
            });
            setProducts(res.data);
        } catch (err) {
            console.error("‚ùå L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m:", err);
        }
    };

    useEffect(() => {
        fetchProducts();
    }, []);

    // ‚ûï Th√™m s·∫£n ph·∫©m
    const handleAdd = async (e) => {
        e.preventDefault();
        try {
            await axios.post("/products", form, {
                headers: { Authorization: `Bearer ${token}` },
            });
            alert("‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
            setForm({ _id: "", name: "", price: "", image: "", category: "" });
            fetchProducts();
        } catch (err) {
            console.error("‚ùå L·ªói th√™m s·∫£n ph·∫©m:", err);
            alert("‚ùå Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m!");
        }
    };

    // ‚úèÔ∏è Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ s·ª≠a
    const handleEdit = (p) => {
        setForm({
            _id: p._id || p.id || "",
            name: p.name || "",
            price: p.price || "",
            image: p.image || "",
            category: p.category || "",
        });
        setEditing(true);
    };

    // üíæ C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    const handleUpdate = async (e) => {
        e.preventDefault();
        if (!form._id) return alert("‚ùå Kh√¥ng t√¨m th·∫•y ID s·∫£n ph·∫©m!");

        try {
            await axios.put(`/products/${form._id}`, form, {
                headers: { Authorization: `Bearer ${token}` },
            });
            alert("‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
            setEditing(false);
            setForm({ _id: "", name: "", price: "", image: "", category: "" });
            fetchProducts();
        } catch (err) {
            console.error("üö´ L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err);
            alert("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m!");
        }
    };

    // üóëÔ∏è X√≥a s·∫£n ph·∫©m
    const handleDelete = async (id) => {
        if (!window.confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a m√≥n n√†y?")) return;
        try {
            await axios.delete(`/products/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            alert("üóëÔ∏è X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
            fetchProducts();
        } catch (err) {
            console.error("‚ùå L·ªói x√≥a s·∫£n ph·∫©m:", err);
            alert("‚ùå Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m!");
        }
    };

    // üíµ Format gi√°
    const formatMoney = (n) =>
        n?.toLocaleString("vi-VN", { style: "currency", currency: "VND" }) || "0 ‚Ç´";

    return (
        <AdminLayout>
            <div>
                <h1 className="text-3xl font-bold mb-8 text-gray-800">
                    ‚òï Qu·∫£n l√Ω Menu
                </h1>

                {/* FORM th√™m / s·ª≠a m√≥n */}
                <form
                    onSubmit={editing ? handleUpdate : handleAdd}
                    className="bg-white shadow-md rounded-xl p-6 mb-10 flex flex-wrap gap-4 justify-center border-l-4 border-amber-400"
                >
                    <input
                        type="text"
                        placeholder="T√™n m√≥n"
                        value={form.name}
                        onChange={(e) => setForm({ ...form, name: e.target.value })}
                        className="border p-2 rounded w-60 focus:ring focus:ring-amber-200"
                        required
                    />
                    <input
                        type="number"
                        placeholder="Gi√°"
                        value={form.price}
                        onChange={(e) => setForm({ ...form, price: e.target.value })}
                        className="border p-2 rounded w-40 focus:ring focus:ring-amber-200"
                        required
                    />
                    <input
                        type="text"
                        placeholder="Link ·∫£nh (URL)"
                        value={form.image}
                        onChange={(e) => setForm({ ...form, image: e.target.value })}
                        className="border p-2 rounded w-80 focus:ring focus:ring-amber-200"
                    />
                    <input
                        type="text"
                        placeholder="Ph√¢n lo·∫°i"
                        value={form.category}
                        onChange={(e) => setForm({ ...form, category: e.target.value })}
                        className="border p-2 rounded w-52 focus:ring focus:ring-amber-200"
                    />

                    <button
                        type="submit"
                        className="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 transition"
                    >
                        {editing ? "üíæ L∆∞u thay ƒë·ªïi" : "‚ûï Th√™m m√≥n"}
                    </button>

                    {editing && (
                        <button
                            type="button"
                            onClick={() => {
                                setEditing(false);
                                setForm({
                                    _id: "",
                                    name: "",
                                    price: "",
                                    image: "",
                                    category: "",
                                });
                            }}
                            className="bg-gray-500 text-white px-6 py-2 rounded hover:bg-gray-600 transition"
                        >
                            ‚ùå H·ªßy
                        </button>
                    )}
                </form>

                {/* DANH S√ÅCH M√ìN */}
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
                    {products.map((p) => (
                        <div
                            key={p._id || p.id}
                            className="bg-white rounded-xl shadow-md hover:shadow-lg transition overflow-hidden border border-gray-200"
                        >
                            <img
                                src={p.image || "https://via.placeholder.com/300x200?text=No+Image"}
                                alt={p.name}
                                className="w-full h-48 object-cover"
                            />
                            <div className="p-4 text-center">
                                <h3 className="text-lg font-bold text-amber-900">{p.name}</h3>
                                <p className="text-green-700 font-semibold mt-1">
                                    {formatMoney(p.price)}
                                </p>
                                <p className="text-sm text-gray-500 italic mb-3">
                                    {p.category || "Ch∆∞a ph√¢n lo·∫°i"}
                                </p>

                                <div className="flex justify-center gap-3">
                                    <button
                                        onClick={() => handleEdit(p)}
                                        className="bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600"
                                    >
                                        ‚úèÔ∏è S·ª≠a
                                    </button>
                                    <button
                                        onClick={() => handleDelete(p._id || p.id)}
                                        className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700"
                                    >
                                        üóëÔ∏è X√≥a
                                    </button>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>

                {/* FOOTER */}
                <footer className="text-center mt-10 text-gray-500 text-sm">
                    ¬© 2025 Luxury Cafe Manager ‚Äì Designed VƒÉn Nghƒ©a ‚òï
                </footer>
            </div>
        </AdminLayout>
    );
}
