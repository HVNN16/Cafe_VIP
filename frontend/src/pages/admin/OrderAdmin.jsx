import React, { useEffect, useState } from "react";
import axios from "../../api/axios";
import AdminLayout from "../../layouts/AdminLayout";

export default function OrderAdmin() {
    const token = localStorage.getItem("token");
    const [orders, setOrders] = useState([]);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [showPaymentModal, setShowPaymentModal] = useState(false);
    const [paymentOrderId, setPaymentOrderId] = useState(null);

    // üß≠ L·∫•y danh s√°ch ƒë∆°n h√†ng
    const fetchOrders = async () => {
        try {
            const res = await axios.get("/orders", {
                headers: { Authorization: `Bearer ${token}` },
            });
            setOrders(res.data);
        } catch (err) {
            console.error("‚ùå L·ªói khi t·∫£i ƒë∆°n h√†ng:", err);
        }
    };

    useEffect(() => {
        fetchOrders();
    }, []);

    // üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    const handleStatusChange = async (id, status, paymentMethod = null) => {
        try {
            const url = paymentMethod
                ? `/orders/${id}/status?status=${status}&paymentMethod=${paymentMethod}`
                : `/orders/${id}/status?status=${status}`;

            await axios.put(url, {}, {
                headers: { Authorization: `Bearer ${token}` },
            });

            fetchOrders();
            setShowPaymentModal(false);
        } catch (err) {
            alert("‚ö†Ô∏è L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
        }
    };

    const handleViewDetails = (order) => setSelectedOrder(order);

    const formatMoney = (n) =>
        n?.toLocaleString("vi-VN", { style: "currency", currency: "VND" }) || "0 ‚Ç´";

    const totalRevenue = orders
        .filter((o) => o.status === "paid")
        .reduce((sum, o) => sum + (o.totalPrice || 0), 0);

    return (
        <AdminLayout>
            <div>
                <h1 className="text-3xl font-bold mb-6 text-gray-800">
                    üßæ Qu·∫£n l√Ω ƒë∆°n h√†ng
                </h1>

                <div className="text-right mb-4 text-lg font-semibold text-green-700">
                    üí∞ T·ªïng doanh thu: {formatMoney(totalRevenue)}
                </div>

                {/* Danh s√°ch ƒë∆°n h√†ng */}
                <div className="overflow-x-auto">
                    <table className="w-full border-collapse border border-gray-300 text-center shadow-md rounded-lg">
                        <thead className="bg-amber-100 text-amber-900">
                        <tr>
                            <th className="border p-2">#</th>
                            <th className="border p-2">S·ªë b√†n</th>
                            <th className="border p-2">V·ªã tr√≠</th>
                            <th className="border p-2">S·ªë m√≥n</th>
                            <th className="border p-2">Tr·∫°ng th√°i</th>
                            <th className="border p-2">Thanh to√°n</th>
                            <th className="border p-2">T·ªïng ti·ªÅn</th>
                            <th className="border p-2">Ng√†y gi·ªù ƒë·∫∑t</th>
                            <th className="border p-2">H√†nh ƒë·ªông</th>
                        </tr>
                        </thead>
                        <tbody>
                        {orders.map((o, index) => (
                            <tr
                                key={o.id || o._id}
                                className="bg-white hover:bg-amber-50 transition"
                            >
                                <td className="border p-2">{index + 1}</td>
                                <td className="border p-2 text-blue-700 font-semibold">
                                    B√†n {o.tableNumber || "?"}
                                </td>
                                <td className="border p-2">{o.tableLocation || "‚Äî"}</td>
                                <td className="border p-2">{o.items?.length || 0}</td>
                                <td
                                    className={`border p-2 font-bold ${
                                        o.status === "pending"
                                            ? "text-yellow-600"
                                            : o.status === "served"
                                                ? "text-blue-600"
                                                : "text-green-700"
                                    }`}
                                >
                                    {o.status}
                                </td>
                                <td className="border p-2 italic text-gray-600">
                                    {o.paymentMethod
                                        ? o.paymentMethod === "cash"
                                            ? "üíµ Ti·ªÅn m·∫∑t"
                                            : "üì± QR"
                                        : "‚Äî"}
                                </td>
                                <td className="border p-2 text-green-700 font-bold">
                                    {formatMoney(o.totalPrice)}
                                </td>
                                <td className="border p-2 text-gray-500">
                                    {o.createdAt
                                        ? new Date(o.createdAt).toLocaleString("vi-VN")
                                        : "‚Äî"}
                                </td>
                                <td className="border p-2 flex justify-center gap-2 flex-wrap">
                                    <button
                                        onClick={() => handleViewDetails(o)}
                                        className="bg-gray-500 text-white px-3 py-1 rounded hover:bg-gray-600"
                                    >
                                        üëÅÔ∏è Xem
                                    </button>
                                    {o.status !== "paid" && (
                                        <>
                                            <button
                                                onClick={() => handleStatusChange(o.id, "served")}
                                                className="bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600"
                                            >
                                                üçΩÔ∏è Ph·ª•c v·ª•
                                            </button>
                                            <button
                                                onClick={() => {
                                                    setPaymentOrderId(o.id);
                                                    setShowPaymentModal(true);
                                                }}
                                                className="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700"
                                            >
                                                üí∞ Thanh to√°n
                                            </button>
                                        </>
                                    )}
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                </div>

                {/* üíµ Modal ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n */}
                {showPaymentModal && (
                    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
                        <div className="bg-white rounded-xl p-8 shadow-xl w-[90%] max-w-md text-center">
                            <h2 className="text-2xl font-bold text-amber-900 mb-6">
                                üí≥ Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
                            </h2>

                            <div className="flex flex-col gap-6">
                                {/* üíµ Thanh to√°n ti·ªÅn m·∫∑t */}
                                <button
                                    onClick={() =>
                                        handleStatusChange(paymentOrderId, "paid", "cash")
                                    }
                                    className="bg-green-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-green-700 transition"
                                >
                                    üíµ Thanh to√°n ti·ªÅn m·∫∑t
                                </button>

                                {/* üì± Thanh to√°n b·∫±ng QR */}
                                <div className="bg-blue-50 p-4 rounded-lg shadow-inner">
                                    <p className="font-semibold text-blue-800 mb-2">
                                        üì± Qu√©t m√£ QR ƒë·ªÉ thanh to√°n:
                                    </p>
                                    <img
                                        src="/images/qr-momo.png" // üî∏ ·∫£nh QR c·ªßa em ƒë·ªÉ trong th∆∞ m·ª•c public/images
                                        alt="QR Payment"
                                        className="w-48 h-48 mx-auto rounded-lg border-2 border-blue-300 shadow"
                                    />
                                    <button
                                        onClick={() =>
                                            handleStatusChange(paymentOrderId, "paid", "qr")
                                        }
                                        className="mt-4 bg-blue-600 text-white py-2 px-6 rounded-lg text-lg font-semibold hover:bg-blue-700 transition"
                                    >
                                        ‚úÖ X√°c nh·∫≠n ƒë√£ thanh to√°n QR
                                    </button>
                                </div>
                            </div>

                            <button
                                onClick={() => setShowPaymentModal(false)}
                                className="mt-6 text-gray-600 hover:text-gray-800 underline"
                            >
                                H·ªßy
                            </button>
                        </div>
                    </div>
                )}

                {/* üìã Chi ti·∫øt ƒë∆°n h√†ng */}
                {selectedOrder && (
                    <div className="mt-10 bg-white p-6 rounded-xl shadow-lg border-t-4 border-amber-400">
                        <h2 className="text-2xl font-bold mb-4 text-amber-900">
                            üßæ Chi ti·∫øt ƒë∆°n h√†ng #{selectedOrder.id}
                        </h2>
                        <p className="mb-1 text-gray-700 font-semibold">
                            ü™ë B√†n: {selectedOrder.tableNumber || "?"}
                        </p>
                        <p className="mb-1 text-gray-700">
                            üìç V·ªã tr√≠: {selectedOrder.tableLocation || "‚Äî"}
                        </p>
                        <p className="mb-1 text-gray-700">
                            üí≥ Thanh to√°n:{" "}
                            <span className="font-semibold text-blue-700">
                {selectedOrder.paymentMethod
                    ? selectedOrder.paymentMethod === "cash"
                        ? "Ti·ªÅn m·∫∑t"
                        : "Qu√©t QR"
                    : "Ch∆∞a thanh to√°n"}
              </span>
                        </p>
                        <p className="mb-3 text-gray-600">
                            ‚è∞ Ng√†y gi·ªù ƒë·∫∑t:{" "}
                            {selectedOrder.createdAt
                                ? new Date(selectedOrder.createdAt).toLocaleString("vi-VN")
                                : "‚Äî"}
                        </p>
                        <p className="mb-4 text-gray-600">
                            üì¶ Tr·∫°ng th√°i:{" "}
                            <span className="font-bold text-blue-600">
                {selectedOrder.status}
              </span>
                        </p>

                        <table className="w-full border border-gray-300 text-center rounded-lg overflow-hidden">
                            <thead className="bg-amber-100">
                            <tr>
                                <th className="border p-2">M√≥n</th>
                                <th className="border p-2">S·ªë l∆∞·ª£ng</th>
                                <th className="border p-2">ƒê∆°n gi√°</th>
                                <th className="border p-2">T·ªïng</th>
                            </tr>
                            </thead>
                            <tbody>
                            {selectedOrder.items.map((item, index) => (
                                <tr key={index}>
                                    <td className="border p-2">{item.name}</td>
                                    <td className="border p-2">{item.quantity}</td>
                                    <td className="border p-2">{formatMoney(item.price)}</td>
                                    <td className="border p-2">
                                        {formatMoney(item.price * item.quantity)}
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>

                        <div className="mt-4 text-right font-bold text-lg">
                            T·ªïng c·ªông:{" "}
                            <span className="text-green-700">
                {formatMoney(selectedOrder.totalPrice)}
              </span>
                        </div>

                        <div className="mt-4 flex justify-end gap-3">
                            <button
                                onClick={() => setSelectedOrder(null)}
                                className="bg-gray-500 text-white px-5 py-2 rounded hover:bg-gray-600"
                            >
                                ‚úñÔ∏è ƒê√≥ng
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </AdminLayout>
    );
}
